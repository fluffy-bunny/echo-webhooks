// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package sse

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIServerSideEventServer used when your service claims to implement IServerSideEventServer
var ReflectTypeIServerSideEventServer = di.GetInterfaceReflectType((*IServerSideEventServer)(nil))

// AddSingletonIServerSideEventServer adds a type that implements IServerSideEventServer
func AddSingletonIServerSideEventServer(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SINGLETON", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIServerSideEventServerWithMetadata adds a type that implements IServerSideEventServer
func AddSingletonIServerSideEventServerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SINGLETON", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIServerSideEventServerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIServerSideEventServerByObj adds a prebuilt obj
func AddSingletonIServerSideEventServerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SINGLETON", reflect.TypeOf(obj), _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIServerSideEventServerByObjWithMetadata adds a prebuilt obj
func AddSingletonIServerSideEventServerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SINGLETON", reflect.TypeOf(obj), _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIServerSideEventServerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIServerSideEventServerByFunc adds a type by a custom func
func AddSingletonIServerSideEventServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SINGLETON", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIServerSideEventServerByFuncWithMetadata adds a type by a custom func
func AddSingletonIServerSideEventServerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SINGLETON", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIServerSideEventServerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIServerSideEventServer adds a type that implements IServerSideEventServer
func AddTransientIServerSideEventServer(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("TRANSIENT", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIServerSideEventServerWithMetadata adds a type that implements IServerSideEventServer
func AddTransientIServerSideEventServerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("TRANSIENT", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIServerSideEventServerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIServerSideEventServerByFunc adds a type by a custom func
func AddTransientIServerSideEventServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("TRANSIENT", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIServerSideEventServerByFuncWithMetadata adds a type by a custom func
func AddTransientIServerSideEventServerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("TRANSIENT", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIServerSideEventServerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIServerSideEventServer adds a type that implements IServerSideEventServer
func AddScopedIServerSideEventServer(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SCOPED", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIServerSideEventServerWithMetadata adds a type that implements IServerSideEventServer
func AddScopedIServerSideEventServerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SCOPED", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIServerSideEventServerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIServerSideEventServerByFunc adds a type by a custom func
func AddScopedIServerSideEventServerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SCOPED", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIServerSideEventServerByFuncWithMetadata adds a type by a custom func
func AddScopedIServerSideEventServerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIServerSideEventServer)
	_logAddIServerSideEventServer("SCOPED", implType, _getImplementedIServerSideEventServerNames(implementedTypes...),
		_logIServerSideEventServerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIServerSideEventServerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIServerSideEventServer removes all IServerSideEventServer from the DI
func RemoveAllIServerSideEventServer(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIServerSideEventServer)
}

// GetIServerSideEventServerFromContainer alternative to SafeGetIServerSideEventServerFromContainer but panics of object is not present
func GetIServerSideEventServerFromContainer(ctn di.Container) IServerSideEventServer {
	return ctn.GetByType(ReflectTypeIServerSideEventServer).(IServerSideEventServer)
}

// GetManyIServerSideEventServerFromContainer alternative to SafeGetManyIServerSideEventServerFromContainer but panics of object is not present
func GetManyIServerSideEventServerFromContainer(ctn di.Container) []IServerSideEventServer {
	objs := ctn.GetManyByType(ReflectTypeIServerSideEventServer)
	var results []IServerSideEventServer
	for _, obj := range objs {
		results = append(results, obj.(IServerSideEventServer))
	}
	return results
}

// SafeGetIServerSideEventServerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIServerSideEventServerFromContainer(ctn di.Container) (IServerSideEventServer, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIServerSideEventServer)
	if err != nil {
		return nil, err
	}
	return obj.(IServerSideEventServer), nil
}

// GetIServerSideEventServerDefinition returns that last definition registered that this container can provide
func GetIServerSideEventServerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIServerSideEventServer)
	return def
}

// GetIServerSideEventServerDefinitions returns all definitions that this container can provide
func GetIServerSideEventServerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIServerSideEventServer)
	return defs
}

// SafeGetManyIServerSideEventServerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIServerSideEventServerFromContainer(ctn di.Container) ([]IServerSideEventServer, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIServerSideEventServer)
	if err != nil {
		return nil, err
	}
	var results []IServerSideEventServer
	for _, obj := range objs {
		results = append(results, obj.(IServerSideEventServer))
	}
	return results, nil
}

type _logIServerSideEventServerExtra struct {
	Name  string
	Value interface{}
}

func _logAddIServerSideEventServer(scopeType string, implType reflect.Type, interfaces string, extra ..._logIServerSideEventServerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIServerSideEventServerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
