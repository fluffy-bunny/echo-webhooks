// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package basicauth

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIBasicAuthStore used when your service claims to implement IBasicAuthStore
var ReflectTypeIBasicAuthStore = di.GetInterfaceReflectType((*IBasicAuthStore)(nil))

// AddSingletonIBasicAuthStore adds a type that implements IBasicAuthStore
func AddSingletonIBasicAuthStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SINGLETON", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIBasicAuthStoreWithMetadata adds a type that implements IBasicAuthStore
func AddSingletonIBasicAuthStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SINGLETON", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIBasicAuthStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIBasicAuthStoreByObj adds a prebuilt obj
func AddSingletonIBasicAuthStoreByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SINGLETON", reflect.TypeOf(obj), _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIBasicAuthStoreByObjWithMetadata adds a prebuilt obj
func AddSingletonIBasicAuthStoreByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SINGLETON", reflect.TypeOf(obj), _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIBasicAuthStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIBasicAuthStoreByFunc adds a type by a custom func
func AddSingletonIBasicAuthStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SINGLETON", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIBasicAuthStoreByFuncWithMetadata adds a type by a custom func
func AddSingletonIBasicAuthStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SINGLETON", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIBasicAuthStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIBasicAuthStore adds a type that implements IBasicAuthStore
func AddTransientIBasicAuthStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("TRANSIENT", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIBasicAuthStoreWithMetadata adds a type that implements IBasicAuthStore
func AddTransientIBasicAuthStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("TRANSIENT", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIBasicAuthStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIBasicAuthStoreByFunc adds a type by a custom func
func AddTransientIBasicAuthStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("TRANSIENT", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIBasicAuthStoreByFuncWithMetadata adds a type by a custom func
func AddTransientIBasicAuthStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("TRANSIENT", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIBasicAuthStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIBasicAuthStore adds a type that implements IBasicAuthStore
func AddScopedIBasicAuthStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SCOPED", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIBasicAuthStoreWithMetadata adds a type that implements IBasicAuthStore
func AddScopedIBasicAuthStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SCOPED", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIBasicAuthStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIBasicAuthStoreByFunc adds a type by a custom func
func AddScopedIBasicAuthStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SCOPED", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIBasicAuthStoreByFuncWithMetadata adds a type by a custom func
func AddScopedIBasicAuthStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIBasicAuthStore)
	_logAddIBasicAuthStore("SCOPED", implType, _getImplementedIBasicAuthStoreNames(implementedTypes...),
		_logIBasicAuthStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIBasicAuthStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIBasicAuthStore removes all IBasicAuthStore from the DI
func RemoveAllIBasicAuthStore(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIBasicAuthStore)
}

// GetIBasicAuthStoreFromContainer alternative to SafeGetIBasicAuthStoreFromContainer but panics of object is not present
func GetIBasicAuthStoreFromContainer(ctn di.Container) IBasicAuthStore {
	return ctn.GetByType(ReflectTypeIBasicAuthStore).(IBasicAuthStore)
}

// GetManyIBasicAuthStoreFromContainer alternative to SafeGetManyIBasicAuthStoreFromContainer but panics of object is not present
func GetManyIBasicAuthStoreFromContainer(ctn di.Container) []IBasicAuthStore {
	objs := ctn.GetManyByType(ReflectTypeIBasicAuthStore)
	var results []IBasicAuthStore
	for _, obj := range objs {
		results = append(results, obj.(IBasicAuthStore))
	}
	return results
}

// SafeGetIBasicAuthStoreFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIBasicAuthStoreFromContainer(ctn di.Container) (IBasicAuthStore, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIBasicAuthStore)
	if err != nil {
		return nil, err
	}
	return obj.(IBasicAuthStore), nil
}

// GetIBasicAuthStoreDefinition returns that last definition registered that this container can provide
func GetIBasicAuthStoreDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIBasicAuthStore)
	return def
}

// GetIBasicAuthStoreDefinitions returns all definitions that this container can provide
func GetIBasicAuthStoreDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIBasicAuthStore)
	return defs
}

// SafeGetManyIBasicAuthStoreFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIBasicAuthStoreFromContainer(ctn di.Container) ([]IBasicAuthStore, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIBasicAuthStore)
	if err != nil {
		return nil, err
	}
	var results []IBasicAuthStore
	for _, obj := range objs {
		results = append(results, obj.(IBasicAuthStore))
	}
	return results, nil
}

type _logIBasicAuthStoreExtra struct {
	Name  string
	Value interface{}
}

func _logAddIBasicAuthStore(scopeType string, implType reflect.Type, interfaces string, extra ..._logIBasicAuthStoreExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIBasicAuthStoreNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
