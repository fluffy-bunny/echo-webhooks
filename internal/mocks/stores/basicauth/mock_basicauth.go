// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/stores/basicauth (interfaces: IBasicAuthStore)

// Package basicauth is a generated GoMock package.
package basicauth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBasicAuthStore is a mock of IBasicAuthStore interface.
type MockIBasicAuthStore struct {
	ctrl     *gomock.Controller
	recorder *MockIBasicAuthStoreMockRecorder
}

// MockIBasicAuthStoreMockRecorder is the mock recorder for MockIBasicAuthStore.
type MockIBasicAuthStoreMockRecorder struct {
	mock *MockIBasicAuthStore
}

// NewMockIBasicAuthStore creates a new mock instance.
func NewMockIBasicAuthStore(ctrl *gomock.Controller) *MockIBasicAuthStore {
	mock := &MockIBasicAuthStore{ctrl: ctrl}
	mock.recorder = &MockIBasicAuthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBasicAuthStore) EXPECT() *MockIBasicAuthStoreMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockIBasicAuthStore) Validate(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockIBasicAuthStoreMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIBasicAuthStore)(nil).Validate), arg0, arg1)
}
