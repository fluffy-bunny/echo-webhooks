// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/sse (interfaces: IServerSideEventServer)

// Package sse is a generated GoMock package.
package sse

import (
	http "net/http"
	reflect "reflect"

	sse "github.com/alexandrevicenzi/go-sse"
	gomock "github.com/golang/mock/gomock"
)

// MockIServerSideEventServer is a mock of IServerSideEventServer interface.
type MockIServerSideEventServer struct {
	ctrl     *gomock.Controller
	recorder *MockIServerSideEventServerMockRecorder
}

// MockIServerSideEventServerMockRecorder is the mock recorder for MockIServerSideEventServer.
type MockIServerSideEventServerMockRecorder struct {
	mock *MockIServerSideEventServer
}

// NewMockIServerSideEventServer creates a new mock instance.
func NewMockIServerSideEventServer(ctrl *gomock.Controller) *MockIServerSideEventServer {
	mock := &MockIServerSideEventServer{ctrl: ctrl}
	mock.recorder = &MockIServerSideEventServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServerSideEventServer) EXPECT() *MockIServerSideEventServerMockRecorder {
	return m.recorder
}

// Channels mocks base method.
func (m *MockIServerSideEventServer) Channels() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channels")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Channels indicates an expected call of Channels.
func (mr *MockIServerSideEventServerMockRecorder) Channels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channels", reflect.TypeOf((*MockIServerSideEventServer)(nil).Channels))
}

// ClientCount mocks base method.
func (m *MockIServerSideEventServer) ClientCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// ClientCount indicates an expected call of ClientCount.
func (mr *MockIServerSideEventServerMockRecorder) ClientCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientCount", reflect.TypeOf((*MockIServerSideEventServer)(nil).ClientCount))
}

// CloseChannel mocks base method.
func (m *MockIServerSideEventServer) CloseChannel(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseChannel", arg0)
}

// CloseChannel indicates an expected call of CloseChannel.
func (mr *MockIServerSideEventServerMockRecorder) CloseChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseChannel", reflect.TypeOf((*MockIServerSideEventServer)(nil).CloseChannel), arg0)
}

// GetChannel mocks base method.
func (m *MockIServerSideEventServer) GetChannel(arg0 string) (*sse.Channel, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0)
	ret0, _ := ret[0].(*sse.Channel)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockIServerSideEventServerMockRecorder) GetChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockIServerSideEventServer)(nil).GetChannel), arg0)
}

// HasChannel mocks base method.
func (m *MockIServerSideEventServer) HasChannel(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChannel", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasChannel indicates an expected call of HasChannel.
func (mr *MockIServerSideEventServerMockRecorder) HasChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChannel", reflect.TypeOf((*MockIServerSideEventServer)(nil).HasChannel), arg0)
}

// Restart mocks base method.
func (m *MockIServerSideEventServer) Restart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restart")
}

// Restart indicates an expected call of Restart.
func (mr *MockIServerSideEventServerMockRecorder) Restart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockIServerSideEventServer)(nil).Restart))
}

// SendMessage mocks base method.
func (m *MockIServerSideEventServer) SendMessage(arg0 string, arg1 *sse.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", arg0, arg1)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIServerSideEventServerMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIServerSideEventServer)(nil).SendMessage), arg0, arg1)
}

// ServeHTTP mocks base method.
func (m *MockIServerSideEventServer) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockIServerSideEventServerMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockIServerSideEventServer)(nil).ServeHTTP), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockIServerSideEventServer) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIServerSideEventServerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIServerSideEventServer)(nil).Shutdown))
}
